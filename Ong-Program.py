import psycopg2

#ALL QUERIES:

QUERY1QUERY2 = '''
SELECT E.id, E.title, E.deadline, E.area, F.reqdamount, F.pi, F.num_participants
FROM call E JOIN (--the following query creates (callid, reqdamount, pi, num_participants)
	SELECT callid, reqdamount, pi, num_participants
	FROM proposal C JOIN ( --the following query creates (proposal_id, num_collaborators)
		SELECT A.id, COUNT(researcherid) num_participants
		FROM proposal A JOIN collaborator B ON A.id=B.proposalid
		GROUP BY A.id
	) D ON C.id = D.id
) F ON E.id = F.callid
WHERE (F.reqdamount > 20000 OR F.num_participants > 10) AND
((E.area=ANY (%(areas)s) OR %(areas)s IS NULL) AND
(F.pi=ANY (%(pis)s) OR %(pis)s IS NULL) AND
(status='open' AND (%(month)s::date < deadline OR %(month)s IS NULL)));
'''

QUERY3 = '''
SELECT F.area, E.id, E.reqdamount
FROM ( --gets table with each proposal's reqdamount and area.
	SELECT C.area, D.id, D.reqdamount, D.callid, D.pi, D.status, D.amount, D.submitted, D.awarded
	FROM call C JOIN proposal D ON C.id=D.callid
) E JOIN ( --gets table with max reqdamount in each area.
	SELECT A.area, MAX(reqdamount)
	FROM call A JOIN proposal B ON A.id=B.callid
	GROUP BY A.area
) F ON E.reqdamount=F.max AND E.area=F.area
WHERE F.area=%(area)s OR %(area)s IS NULL;
'''

QUERY4 = '''
SELECT id, amount, submitted
FROM (--gets all proposals b4 user given date
	SELECT *
	FROM proposal
	WHERE submitted < %(date)s::date OR %(date)s IS NULL
) A JOIN ( --gets max amount awarded from proposals b4 given user date
	SELECT MAX(amount)
	FROM proposal
	WHERE submitted < %(date)s::date OR %(date)s IS NULL
) B ON A.amount = B.max;
'''

QUERY5 = '''
SELECT A.area, AVG(ABS(reqdamount-amount))
FROM call A JOIN proposal B ON A.id=B.callid
WHERE A.area=%(area)s OR %(area)s IS NULL
GROUP BY A.area;
'''

QUERY6A = '''
SELECT *
FROM researcher
WHERE id NOT IN (--table of researchers that are in conflict with given proposal
	--1. people that conflict with people in the proposal:
	SELECT C.researcher2 AS id
	FROM
		proposal A
		JOIN collaborator B ON A.id=B.proposalid
		JOIN ( --union of conflicts.
			SELECT *
			FROM conflict
			UNION
			SELECT id, researcher2 AS researcher1, researcher1 AS researcher2, reason, expiry
			FROM conflict
		) C ON B.researcherid=C.researcher1
	WHERE A.id = %(proposal)s
	UNION
	--2. people that are in the proposal
	SELECT D.researcherid AS id
	FROM collaborator D
	WHERE D.proposalid=%(proposal)s
	UNION
	--3. people reviewing >=3 proposals
	SELECT C.id
	FROM (--list of reviewer,proposal
		--all co-reviewers,proposal
		SELECT B.researcherid AS id, A.proposalid AS proposalid
		FROM review A JOIN coreviewer B ON A.id=B.reviewid
		WHERE A.submitted=FALSE
		UNION
		--all primary reviewers, proposal
		SELECT reviewerid AS id, proposalid
		FROM review
		WHERE submitted=FALSE
	) C
	GROUP BY C.id
	HAVING COUNT(C.id) >= 3	
);
'''

#QUERY6B is generated by the program. looks something like this:
'''
INSERT INTO review VALUES
(DEFAULT, %(rid0)s, %(proposal)s, now() + interval '2 week', FALSE),
(DEFAULT, %(rid1)s, %(proposal)s, now() + interval '2 week', FALSE),
(DEFAULT, %(rid2)s, %(proposal)s, now() + interval '2 week', FALSE);
'''

QUERY7A = '''
SELECT A.id, A.roomid, A.date
FROM meetings A
WHERE A.roomid=%(room)s AND A.date=%(date)s::date;
'''

QUERY7B = '''
SELECT F.researcherid, G.id, G.roomid, G.date
FROM (--table of all meetings the researchers handling proposals under the given calls are in.
	SELECT D.researcherid, E.meetingid
	FROM (--finds all people reviewing the given calls.
		SELECT DISTINCT C.researcherid
		FROM (--list of all reviewers and their proposals
			--all reviewers reviewing proposals under given calls:
			SELECT B.researcherid AS researcherid, A.proposalid AS proposalid
			FROM review A JOIN coreviewer B ON A.id=B.reviewid
			UNION
			--all primary reviewers, proposal
			SELECT reviewerid AS researcherid, proposalid
			FROM review
		) C WHERE C.proposalid IN (--all the proposals under the given calls
			SELECT B.id
			FROM (
				SELECT *
				FROM call
				WHERE id = ANY (%(calls)s)
			) A JOIN proposal B ON A.id = B.callid
		)
	) D JOIN rsvps E ON D.researcherid=E.researcherid
) F JOIN meetings G ON F.meetingid=g.id
WHERE G.date=%(date)s;
'''

QUERY7Ci = '''
INSERT INTO meetings VALUES
(DEFAULT, %(room)s, %(date)s::date);
'''

QUERY7Cii = '''
SELECT id
FROM meetings
WHERE roomid=%(room)s AND date=%(date)s::date;
'''

#QUERY7Ciii is generated by the program. looks something like this:
'''
INSERT INTO discussedcalls VALUES
(%(meeting)s, %(call0)s),
(%(meeting)s, %(call1)s),
(%(meeting)s, %(call2)s);
'''

QUERY7Civ = '''
INSERT INTO rsvps
--all the researchers  reviewing proposals relavent to the calls being discussed in the new meeting:
SELECT %(meeting)s AS meetingid, D.researcherid
FROM (
	SELECT DISTINCT C.researcherid
	FROM (--list of all reviewers and their proposals
		--all reviewers reviewing proposals under given calls:
		SELECT B.researcherid AS researcherid, A.proposalid AS proposalid
		FROM review A JOIN coreviewer B ON A.id=B.reviewid
		UNION
		--all primary reviewers, proposal
		SELECT reviewerid AS researcherid, proposalid
		FROM review
	) C WHERE C.proposalid IN (--all the proposals under the given calls
		SELECT B.id
		FROM (
			SELECT *
			FROM call
			WHERE id = ANY (%(calls)s)
		) A JOIN proposal B ON A.id = B.callid
	)
) D;
'''

#HELPER FUNTIONS:
def run_query_helper(cur, query, data, user_input):
	success = False
	try:
		cur.execute(query, data)
		success = True
	except Exception as e:
		print("")
		print("ERROR: Failed to query the database with the following input.")
		for ui in user_input:
			print(ui[0] + ": ", ui[1])
		print("")
		print("Here is the error that the database returned:")
		print(e)
		cur.execute("rollback");
	return success

def run_query(cur, query, data, user_input, no_r, pr_row, print_rows):
	print("Running query...")
	rows = None
	success = False
	success = run_query_helper(cur, query, data, user_input)
	if (success):
		if (print_rows):
			rows = cur.fetchall()
			if (len(rows) == 0):
				print(no_r)
			for row in rows:
				try:
					pr_row(row)
				except:
					print("ERROR: Couldn't print results for row. Displaying raw row data instead.")
					print(row)
		print("Query was a success!")
	else:
		print("Query was a failure.")
	return rows

def get_user_input_single(instructions, user_input, uin):
	print(instructions)
	ui = input(">")
	user_input.append((uin, ui))
	return ui

def get_user_input_list(instructions, user_input, uin):
	ul = []
	ui = "???"
	print(instructions)
	print("Leave an empty line to indicate that you are done!")
	while (ui != ""):
		ui = input(">")
		if (ui != ""):
			ul.append(ui)
	user_input.append((uin, ul))
	return ul

def format_user_input_list_to_int(ul, uln, err_msg):
	fl = []
	try:
		for ui in ul:
			fl.append(int(ui))
	except:
		print(err_msg)
		print(uln, ul)
		return []
	return fl

def format_user_input_len0_check(ui):
	if (len(ui) == 0):
		return None
	return ui

def format_user_input_int_check(ui):
	suc = True
	try:
		int(ui)
	except:
		suc = False
	return suc

def create_query_insert_1(table, ilist, q1, q2, name, data):
	query = "INSERT INTO " + table + " VALUES"
	for i in range(len(ilist)):
		query = query + q1 + str(i) + q2
		if (i + 1 == len(ilist)):
			query = query + ";"
		else:
			query = query + ","
		data[name + str(i)] = ilist[i]
	return query

#ALL THE OPERATIONS:
def Q1Q2(cur):
	#1. get user input
	user_input = []
	month = get_user_input_single("Please enter the month that you are interested in (YYYY-MM).", user_input, "month")
	areas = get_user_input_list("Please enter the areas (e.g., biology) that you are interested in.", user_input, "areas")
	pis = get_user_input_list("Please enter the ID of each principle investigator that you are interested in.", user_input, "IDs of principle investigators")
	#2. format stuff for query:
	query = QUERY1QUERY2
	input_month = None
	if (month != ""):
		input_month = month  + '-01'
	areas = format_user_input_len0_check(areas)
	ipis = format_user_input_list_to_int(pis, "The given IDs:", "ERROR: One or more given principle investigator IDs were not integers.")
	if (len(ipis) != len(pis)):
		return
	ipis = format_user_input_len0_check(ipis)
	data = {'month': input_month, 'areas': areas, 'pis': ipis}
	#3. run query:
	def Q1Q2row_pr(row):
		print("Call #" + str(row[0]) + ", " + row[1] +
		", is in area " + row[3] + ", and will be open until its deadline at " +
		row[2].strftime("%Y-%m-%d") + ". It has a proposal that has a principle investigator with ID " +
		str(row[5]) + ", has " + str(row[6]) + " participants, and requested $" +
		str(row[4]) + ".")
	run_query(cur, query, data, user_input, "No results! Maybe try a different month, set of areas, or set of principle investigators.", Q1Q2row_pr, True)

def Q3(cur):
	#1. get user input
	user_input = []
	area = get_user_input_single("Please enter the area that you are interested in.", user_input, "area")
	#2. format stuff for query
	area = format_user_input_len0_check(area)
	query = QUERY3
	data = {'area': area}
	#3. run query
	def Q3pr_row(row):
		print("Proposal #" + str(row[1]) + ", in area " + row[0] + ", requested $" + str(row[2]) + ".")
	run_query(cur, query, data, user_input, "No results! Maybe try a different area.", Q3pr_row, True)

def Q4(cur):
	#1. get user input:
	user_input = []
	date = get_user_input_single("Please enter the latest date you are interested in. (YYYY-MM-DD)", user_input, "date")
	#2. format stuff for query:
	date = format_user_input_len0_check(date)
	query = QUERY4
	data = {'date': date}
	#3. run query
	def Q4pr_row(row):
		print("Proposal #" + str(row[0]) + ", submitted on " + row[2].strftime("%Y-%m-%d") + ", was rewarded $" + str(row[1]) + ".")
	run_query(cur, query, data, user_input, "No results! Maybe try a different date.", Q4pr_row, True)

def Q5(cur):
	#1. get user input:
	user_input = []
	area = get_user_input_single("Please enter the area that you are interested in.", user_input, "area")
	#2. format stuff for query:
	area = format_user_input_len0_check(area)
	query = QUERY5
	data = {'area': area} 
	#3. run query
	def Q5pr_row(row):
		print("Area " + row[0] + " has an average requested/awarded discrepancy of $" + str(round(row[1], 2)) + ".")
	run_query(cur, query, data, user_input, "No results! Maybe try a different area.", Q5pr_row, True)

def Q6(cur):
	#1. get user input
	user_input = []
	proposal = get_user_input_single("Please enter the ID of the proposal you want reviewed.", user_input, "proposal_id")
	isint = format_user_input_int_check(proposal)
	if (not isint):
		print("ERROR: given proposal ID is not an integer.")
		return
	#2. format stuff for query1.
	query = QUERY6A
	data = {'proposal': proposal}
	#3. check if user wants to run query 1.
	print("Would you like a list of reviewers who are not in conflict with that proposal? (y/n)")
	run = False
	while (True):
		ui = input(">")
		if (ui == 'y'):
			run = True
			break
		elif (ui == 'n'):
			break
		else:
			print("ERROR: input was not 'y' or 'n'.")
	#4. run query 1 if user wants.
	if (run):
		def Q6Apr_row(row):
			print("Researcher #" + str(row[0]) + ", " + row[1] + " " + row[2] + " of " + row[4] + ", does not conflict with the proposal. Contact: " + row[3] + ".")
		run_query(cur, query, data, user_input, "No results! Maybe try a different proposal.", Q6Apr_row, True)

	#5. get user input for query 2.
	reviewers = get_user_input_list("Please enter the IDs of the researchers you'd like to review your proposal.", user_input, "researcher_IDs")
	#6. format stuff for query 2.
	ireviewers = format_user_input_list_to_int(reviewers, "The given IDs:", "ERROR: One or more given researcher IDs were not integers.")
	if (len(ireviewers) != len(reviewers)):
		return
	if (len(ireviewers) == 0):
		print("ERROR: No researchers were given.")
		return
	print("Assigning researchers to review your proposal...")
	query = create_query_insert_1("review", ireviewers, " (DEFAULT, %(rid", ")s, %(proposal)s, now() + interval '2 week', FALSE)", "rid", data)
	#6. run query 2.
	run_query(cur, query, data, user_input, "N/A", None, False)

def Q7(cur):
	#1. get user input for query 1.
	user_input = []
	room = get_user_input_single("Please enter the ID of the room you want to book.", user_input, "room")
	date = get_user_input_single("Please enter the date you want to hold the meeting. (YYYY-MM-DD)", user_input, "date")
	#2. format the stuff for query 1.
	query = QUERY7A
	data = {'room': room, 'date': date}
	#3. run query 1.
	print("Checking if the room is available at that date...")
	def Q7Apr_row(row):
		print("Meeting #" + str(row[0]) + " is being held in room #" + str(row[1]) + " at " + row[2].strftime("%Y-%m-%d") + ".")
	rows = run_query(cur, query, data, user_input, "No conflicting meetings! That's great!", Q7Apr_row, True)
	if (rows == None):
		return
	if (len(rows) > 0):
		print("Unfortunately, that room is unavailable.")
		return
	#4. get user input for query 2.
	calls = get_user_input_list("Please enter the IDs of the calls you'd like to discuss on that day.", user_input, "calls")
	#5. format the stuff for query 2.
	icalls = format_user_input_list_to_int(calls, "The given IDs:", "ERROR: One or more given call IDs were not integers.")
	if (len(icalls) != len(calls)):
		return
	if (len(icalls) == 0):
		print("ERROR: No call IDs were given.")
		return
	query = QUERY7B
	data['calls'] = icalls
	#6. run query 2.
	print("Checking if reviewers are available at that date...")
	def Q7Bpr_row(row):
		print("Researcher #" + str(row[0]) + " is attending meeting #" + str(row[1]) + " in room #" + str(row[2]) + " on " + row[3].strftime("%Y-%m-%d") + ".")
	rows = run_query(cur, query, data, user_input, "All reviewers are available! That's great!", Q7Bpr_row, True)
	if (rows == None):
		return
	if (len(rows) > 0):
		print("Unfortunately, some of the reviewers are unavailable.")
		return
	#7. run the rest of the queries:
	#i) create a meeting in the DB at the given room/time
	print("Creating a meeting at the given date and room...")
	run_query(cur, QUERY7Ci, data, user_input, "N/A", None, False)
	#ii) get that meeting ID
	print("Getting your meeting ID...")
	def Q7Ciipr_row(row):
		print("Your meeting ID is " + str(row[0]) + ".")
	rows = run_query(cur, QUERY7Cii, data, user_input, "ERROR: No meeting was created.", Q7Ciipr_row, True)
	if (rows == None):
		return
	if (len(rows) == 0):
		return
	data['meeting'] = rows[0][0]
	#iii) set all given calls to be discussed at that meeting in the DB:
	print("Setting calls to be discussed in that meeting...")
	query = create_query_insert_1("discussedcalls", icalls, " (%(meeting)s, %(call", ")s)", "call", data)
	run_query(cur, query, data, user_input, "N/A", None, False)
	#iv) rsvp all the relavent researchers:
	print("RSVPing all relavent reviewers...")
	run_query(cur, QUERY7Civ, data, user_input, "N/A", None, False)

operation = [Q1Q2, Q1Q2, Q3, Q4, Q5, Q6, Q7]

#START OF THE PROGRAM:

#welcome the user:
print("Welcome! To access this program, please follow the instructions!")

#Connect to the database:
conn = None
while (conn == None):
	#1. get the connection info
	host="cs-db1.csil.sfu.ca"
	port="5432"
	database = input("Enter database: ")
	username = input("Enter username: ")
	password = input("Enter password (totally safe!): ")

	#2: connect
	try:
		conn = psycopg2.connect(host=host,port=port,database=database, user=username, password=password)
	except:
		print("Could not connect to the database!")
		print("The following parameters were used:")
		print("	host=" + host)
		print("	port=" + port)
		print("	database=" + database)
		print("	user=" + username)
		print("	password=" + password)
		print("")

print("Connection successful!")
cur = conn.cursor()

help = True
#Main loop:
while(True):
	#1. print help, if user selects it.
	if (help):
		print("Please select an operation by typing the appropriate number.")
		print("1 and 2. Find all competitions (with large proposals) open in a given month and area, and has a given principle investigator.")
		print("3. Find the proposals in a given area that requested the largest amount of money.")
		print("4. Find the proposals submitted before a given date which were awarded the largest amount of money.")
		print("5. Find the average requested/awarded discrepancy in a given area.")
		print("6. Assign a set of researchers to review a given proposal.")
		print("7. Schedule a meeting to discuss 3 given calls, at a given date and room.")
		print("Type 'q' to quit and 'h' to display this message again.")
		help = False

	#2. get user input.
	input_valid = False
	ui = input(">")
	if (ui == 'q'):
		conn.commit()
		cur.close()
		conn.close()
		exit()
	elif (ui == 'h'):
		help = True
		input_valid = True
	else:
		can_convert = False
		try:
			ui = int(ui)
			can_convert = True
		except:
			print("ERROR: input was not 'h', 'q', or a number.")
		if (can_convert and ui > 0 and ui < 8):
			input_valid = True
		elif (can_convert):
			print("ERROR: input out of [1, 7] range.")

	#3. run the user input.
	if (input_valid and ui != 'h'):
		#run the approproate operation:
		operation[ui - 1](cur)
		print("Returned to main menu. Type 'h' for help.")

